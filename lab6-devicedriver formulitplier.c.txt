/* All of our linux kernel includes. */
#include <linux/module.h>  /* Needed by all modules */
#include <linux/moduleparam.h>  /* Needed for module parameters */
#include <linux/kernel.h>  /* Needed for printk and KERN_* */
#include <linux/init.h>   /* Need for __init macros  */
#include <linux/fs.h>   /* Provides file ops structure */
#include <linux/sched.h>   /* Provides access to the "current" process
task structure */
#include <linux/slab.h> //needed for kmalloc() and kfree()
#include <asm/io.h> //needed for IO reads and writes
#include <asm/uaccess.h>   /* Provides utilities to bring user space
data into kernel space.  Note, it is
processor arch specific. */
#include "xparameters.h" //needed for physical address of the multiplier



/* Some defines */
#define DEVICE_NAME "multiplier"
#define BUF_LEN 80

/* Function prototypes, so we can setup the function pointers for dev
file access correctly. */
int my_init(void);
void my_cleanup(void);
static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char *, size_t, loff_t *);

/*
* Global variables are declared as static, so are global but only
* accessible within the file.
*/
static int Major; /* Major number assigned to our device
driver */


/* This structure defines the function pointers to our functions for
opening, closing, reading and writing the device file.  There are
lots of other pointers in this structure which we are not using,
see the whole definition in linux/fs.h */
static struct file_operations fops = {
.read = device_read,
.write = device_write,
.open = device_open,
.release = device_release
};
//from xparameters.h
#define PHY_ADDR XPAR_MULTIPLY_0_S00_AXI_BASEADDR //physical address of multiplier
//size of physical address range for multiply
#define MEMSIZE XPAR_MULTIPLY_0_S00_AXI_HIGHADDR - XPAR_MULTIPLY_0_S00_AXI_BASEADDR+1  
void* virt_addr; //virtual address pointing to multiplier

/* This function is run upon mdoule load. This is where I setup data structs
and reserve resources used by the moudle */

/* This function is run just prior to the module's removal from the
system. I will release ALL resources used by my module here*/

int my_init(void) {

//map virtual address to multiplier physical address//use ioremap
virt_addr = ioremap(PHY_ADDR, MEMSIZE);
printk(KERN_INFO "Mapping the virutal address...\n");
printk("Physical Address: 0x%x\n", PHY_ADDR);
printk("Virtual Address: 0x%x\n", virt_addr);

/* This function call registers a device and returns a major number
associated with it.  Be wary, the device file could be accessed
as soon as you register it, make sure anything you need (ie
buffers ect) are setup _BEFORE_ you register the device.*/
Major = register_chrdev(0, DEVICE_NAME, &fops); //dynamic allocation

/* Negative values indicate a problem */
if (Major < 0) {
printk(KERN_ALERT "Registering a char device has failed  %d\n", Major);
return Major;
}



printk(KERN_INFO "Registered a device with dynamic Major number of %d\n", Major);
printk(KERN_INFO "Use the command to create a device file:\n'mknod /dev/%s c %d 0'.\n", DEVICE_NAME, Major);
       
return 0; /* success */
}

/*
* This function is called when the module is unloaded, it releases
* the device file.
*/
void my_cleanup(void) {
// Unregister the device
unregister_chrdev(Major, DEVICE_NAME);
iounmap((void*)virt_addr);
printk(KERN_ALERT "unmapping the  virtual address space...\n");
}

/*
* Called when a process tries to open the device file, like "cat
* /dev/my_chardev".  Link to this function placed in file operations
* structure for our device file.
*/
static int device_open(struct inode *inode, struct file *file)
{
 



// if (Device_Open) /* Device_Open is my flag for the
 // usage of the device file (definied
 // in my_chardev_mem.h)  */
   // return -EBUSY; /* Failure to open device is given
 // back to the userland program. */

//  Device_Open++; /* Keeping the count of the device
 // opens. */


  //try_module_get(THIS_MODULE); /* increment the module use count
 // (make sure this is accurate or you
//  won't be able to remove the module
//  later. */

  printk(KERN_INFO "Device has been opened correctly");
  return 0;

}

/*
* Called when a process closes the device file.
*/
static int device_release(struct inode *inode, struct file *file) {

  //Device_Open--; /* We're now ready for our next caller */
 
  /*
   * Decrement the usage count, or else once you opened the file,
   * you'll never get get rid of the module.
   */
  //module_put(THIS_MODULE);
  printk(KERN_INFO"Device has been released");
  return 0;
}

/*
* Called when a process, which already opened the dev file, attempts
* to read from it.
*/
static ssize_t device_read(struct file *filp, /* see include/linux/fs.h*/
char *buffer,      /* buffer to fill with
  data */
size_t length,     /* length of the
  buffer  */
loff_t * offset)
{
/*
* Number of bytes written to the buffer
*/



 
//allocating kernel buffer (not all may be written to user space though)



     int* kernelBuffer = (int*)kmalloc(length * sizeof(int), GFP_KERNEL);
kernelBuffer[0] = ioread32(virt_addr);
kernelBuffer[1] = ioread32(virt_addr + 4);
kernelBuffer[2] = ioread32(virt_addr + 8);

  
/*
* Actually put the data into the buffer
*/



 char* Buffinchar = (char*)kernelBuffer; //bytes will be written one at a time
  int count_bytesread = 0;
for ( int z = 0; z < length; z++) { 
/*
* The buffer is in the user data segment, not the kernel segment
* so "*" assignment won't work.  We have to use put_user which
* copies data from the kernel data segment to the user data
* segment.
*/
put_user(*(Buffinchar++), buffer++); /* one char at a time... */

count_bytesread++;
}

kfree(kernelBuffer);
/*
* Most read functions return the number of bytes put into the
* buffer
*/
return count_bytesread;
}

/*
* Called when a process writes to dev file: echo "hi" > /dev/hello
* Next time we'll make this one do something interesting.
*/
static ssize_t device_write(struct file *filp, const char *buff, size_t len, loff_t * off) {

 
  char* buffermessage = (char *)kmalloc(len*sizeof(char), GFP_KERNEL);
 
  /* printk(KERN_INFO "device_write(%p,%s,%d)", file, buffer, (int)length); */
 

int t=0;
  /* get_user pulls message from userspace into kernel space */
while(t<len && t<BUF_LEN-1){

get_user(buffermessage[t], buff++); // place chars from user space into kernel buffer
t++;


}

 int* int_buffer = (int*)buffermessage;
 
  /* left one char early from buffer to leave space for null char*/
  buffermessage[t] = '\0';
 
 
 
 printk(KERN_INFO "Writing %d to register 0\n", int_buffer[0]); //wrtiting to reg 0

  iowrite32(int_buffer[0], virt_addr + 0); // base address plus offset
 
  printk(KERN_INFO "Writing %d to register 1\n", int_buffer[1]); //wrtiting to reg 1
 
 iowrite32(int_buffer[1], virt_addr + 4); //next address

  /*
   * Again, return the number of input characters used
   */
  
kfree(int_buffer);
  
return t;
}


/* These define info that can be displayed by modinfo */
MODULE_LICENSE("GPL");
MODULE_AUTHOR("GRatz and others");
MODULE_DESCRIPTION("Module which creates a character device and allows user interaction with it");

/* Here we define which functions we want to use for initialization
and cleanup */
module_init(my_init);
module_exit(my_cleanup);